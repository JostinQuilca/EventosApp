// <auto-generated />
using System;
using EventosApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventosApp.Migrations
{
    [DbContext(typeof(EventDbContext))]
    partial class EventDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventosApp.Models.Certificado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InscripcionId")
                        .HasColumnType("integer");

                    b.Property<string>("UrlCertificado")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InscripcionId")
                        .IsUnique();

                    b.ToTable("Certificados");
                });

            modelBuilder.Entity("EventosApp.Models.EstadoInscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("EstadosInscripcion");
                });

            modelBuilder.Entity("EventosApp.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lugar")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<int>("TipoEventoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Nombre");

                    b.HasIndex("TipoEventoId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("EventosApp.Models.EventoPonente", b =>
                {
                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.Property<int>("PonenteId")
                        .HasColumnType("integer");

                    b.HasKey("EventoId", "PonenteId");

                    b.HasIndex("PonenteId");

                    b.ToTable("EventoPonentes");
                });

            modelBuilder.Entity("EventosApp.Models.Inscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer");

                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaInscripcion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParticipanteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("EventoId");

                    b.HasIndex("ParticipanteId");

                    b.ToTable("Inscripciones");
                });

            modelBuilder.Entity("EventosApp.Models.MetodoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("MetodosPago");
                });

            modelBuilder.Entity("EventosApp.Models.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InscripcionId")
                        .HasColumnType("integer");

                    b.Property<int>("MetodoPagoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("InscripcionId")
                        .IsUnique();

                    b.HasIndex("MetodoPagoId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("EventosApp.Models.Participante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Participantes");
                });

            modelBuilder.Entity("EventosApp.Models.Ponente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("Biografia")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Ponentes");
                });

            modelBuilder.Entity("EventosApp.Models.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Salas");
                });

            modelBuilder.Entity("EventosApp.Models.Sesion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("HoraFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SalaId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("SalaId");

                    b.ToTable("Sesiones");
                });

            modelBuilder.Entity("EventosApp.Models.TipoEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TipoEventos");
                });

            modelBuilder.Entity("EventosApp.Models.Certificado", b =>
                {
                    b.HasOne("EventosApp.Models.Inscripcion", "Inscripcion")
                        .WithOne("Certificado")
                        .HasForeignKey("EventosApp.Models.Certificado", "InscripcionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("EventosApp.Models.Evento", b =>
                {
                    b.HasOne("EventosApp.Models.TipoEvento", "TipoEvento")
                        .WithMany("Eventos")
                        .HasForeignKey("TipoEventoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoEvento");
                });

            modelBuilder.Entity("EventosApp.Models.EventoPonente", b =>
                {
                    b.HasOne("EventosApp.Models.Evento", "Evento")
                        .WithMany("EventoPonentes")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventosApp.Models.Ponente", "Ponente")
                        .WithMany("EventoPonentes")
                        .HasForeignKey("PonenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Ponente");
                });

            modelBuilder.Entity("EventosApp.Models.Inscripcion", b =>
                {
                    b.HasOne("EventosApp.Models.EstadoInscripcion", "Estado")
                        .WithMany("Inscripciones")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventosApp.Models.Evento", "Evento")
                        .WithMany("Inscripciones")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventosApp.Models.Participante", "Participante")
                        .WithMany("Inscripciones")
                        .HasForeignKey("ParticipanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Evento");

                    b.Navigation("Participante");
                });

            modelBuilder.Entity("EventosApp.Models.Pago", b =>
                {
                    b.HasOne("EventosApp.Models.Inscripcion", "Inscripcion")
                        .WithOne("Pago")
                        .HasForeignKey("EventosApp.Models.Pago", "InscripcionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventosApp.Models.MetodoPago", "MetodoPago")
                        .WithMany("Pagos")
                        .HasForeignKey("MetodoPagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inscripcion");

                    b.Navigation("MetodoPago");
                });

            modelBuilder.Entity("EventosApp.Models.Sesion", b =>
                {
                    b.HasOne("EventosApp.Models.Evento", "Evento")
                        .WithMany("Sesiones")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventosApp.Models.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("EventosApp.Models.EstadoInscripcion", b =>
                {
                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("EventosApp.Models.Evento", b =>
                {
                    b.Navigation("EventoPonentes");

                    b.Navigation("Inscripciones");

                    b.Navigation("Sesiones");
                });

            modelBuilder.Entity("EventosApp.Models.Inscripcion", b =>
                {
                    b.Navigation("Certificado");

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("EventosApp.Models.MetodoPago", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("EventosApp.Models.Participante", b =>
                {
                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("EventosApp.Models.Ponente", b =>
                {
                    b.Navigation("EventoPonentes");
                });

            modelBuilder.Entity("EventosApp.Models.TipoEvento", b =>
                {
                    b.Navigation("Eventos");
                });
#pragma warning restore 612, 618
        }
    }
}
